/** 
 * 
 */
package io.sarl.hat.airsim.drones.searchrescue.agents

import fr.utbm.airsim.api.Vector3r
import io.sarl.airsim.perceptions.sim.SimGroundTruthKinematicsPerception
import io.sarl.core.Behaviors
import io.sarl.hat.airsim.drones.searchrescue.Area
import io.sarl.hat.airsim.drones.searchrescue.Priority

/** 
 * Data of the drone's state
 * 
 * @author Sebastian Rodriguez
 * 
 */
 

capacity DroneState {
	def getName : String

	def setName(name : String)
	
	def getPosition : Vector3r

	def setPosition(pos : Vector3r)

	def isInPosition(pos : Vector3r, error : float = 2f) : boolean
}


skill DroneStateSkill implements DroneState {
	var position : Vector3r = new Vector3r
	var droneName : String
	
	def getPosition : Vector3r {
		synchronized (this.position) {
			this.position
		}
	}

	def setPosition(pos : Vector3r) {
		synchronized (this.position) {
			this.position = pos
		}
	}

	def isInPosition(pos : Vector3r, error : float) : boolean {
		val dx = Math.abs(pos.x - this.position.x)

		if (dx > error) {
			return false
		}

		val dy = Math.abs(pos.y - this.position.y)

		if (dy > error) {
			return false
		}

		val dz = Math.abs(pos.z - this.position.z)
		if (dz > error) {
			return false
		}

		true

	}
	
	def getName : String {
		this.droneName
	}
	
	def setName(name : String) {
		this.droneName = name
	}
	
}

behavior AirsimDroneStateUpdater {
	uses DroneState, Behaviors

	on SimGroundTruthKinematicsPerception {
		position = occurrence.state.position
		wake(new DronePerceptionsUpdated)

	}

}

/**
 * Search and Rescue app Beliefs
 */
capacity SearchRescueBeliefs {
	def getAssignedArea : Area

	def setAssignedArea(area : Area)
}

skill SearchRescueBeliefsSkill implements SearchRescueBeliefs {
	// Default area
	var assignedArea : Area = new Area(-1f, -1f, 1f, 1f, Priority.LOW)

	def getAssignedArea : Area {
		this.assignedArea
	}

	def setAssignedArea(area : Area) {
		this.assignedArea = area
	}

}

