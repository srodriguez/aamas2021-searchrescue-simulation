/** 
 * 
 */
package io.sarl.hat.airsim.drones.searchrescue.agents

import fr.utbm.airsim.api.Vector3r
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.hat.airsim.drones.Config
import io.sarl.hat.airsim.drones.capacities.IndividualMultirotorControlCapacity
import io.sarl.hat.airsim.drones.capacities.SimControllerForwardIndividualMultirotorControl
import io.sarl.hat.airsim.drones.searchrescue.Priority
import io.sarl.hat.airsim.drones.searchrescue.behaviors.AreaAssignment
import io.sarl.hat.airsim.drones.searchrescue.behaviors.FirtResponderSignaling
import io.sarl.hat.airsim.drones.searchrescue.behaviors.PerformFirstResponderSignaling
import io.sarl.hat.airsim.drones.searchrescue.behaviors.PerformPlowSweep
import io.sarl.hat.airsim.drones.searchrescue.behaviors.PerformRandomSweep
import io.sarl.hat.airsim.drones.searchrescue.behaviors.PlowSweep
import io.sarl.hat.airsim.drones.searchrescue.behaviors.RandomSweep
import io.sarl.hat.airsim.drones.searchrescue.behaviors.VictimDetected
import io.sarl.hat.airsim.drones.searchrescue.behaviors.VictimDetection

import static io.sarl.hat.airsim.drones.searchrescue.agents.DroneIntention.*

/** 
 * @author sebastianrodriguez
 * 
 */


event DronePerceptionsUpdated

enum DroneIntention {
	TAKEOFF,
	REACH_FLY_ALTITUDE,
	IDLE,
	EXPLORE,
	SIGNAL_FR
}

@SuppressWarnings("potential_field_synchronization_problem")


agent Drone {

	uses Logging, Behaviors, IndividualMultirotorControlCapacity, DroneState, SearchRescueBeliefs

	on Initialize {
		// Setup Skill to control my body
		setSkill(new SimControllerForwardIndividualMultirotorControl(), IndividualMultirotorControlCapacity)

		// Set beliefs about drone's state
		setSkill(new DroneStateSkill, DroneState)
		registerBehavior(new AirsimDroneStateUpdater(this))

		name = occurrence.parameters.get(0) as String
		loggingName = name
		setLogLevel(Config.loggingLevel)

		// Set beliefs for Search and Rescue Operations
		setSkill(new SearchRescueBeliefsSkill, SearchRescueBeliefs)

		// Register Behaviors to:
		
		// Explore Areas
		registerBehavior(new RandomSweep(this))
		registerBehavior(new PlowSweep(this))

		// Detect and Locate Victims
		registerBehavior(new VictimDetection(this))

		// Signal First Responders a victim location
		registerBehavior(new FirtResponderSignaling(this))
	}

	var intention = TAKEOFF
	/** 
	 * Handle a the area assignment perception
	 */
	on AreaAssignment {
		assignedArea = occurrence.area
	}

	on VictimDetected [isFromMe] {
		info("{2} VictimDetected {0},{1}", occurrence.x, occurrence.y , name)
		this.intention = SIGNAL_FR
	}

	on DronePerceptionsUpdated [isFromMe] {

		switch (this.intention) {
			case TAKEOFF:
				doTakeOff
			case REACH_FLY_ALTITUDE:
				doReachAltitude
			case EXPLORE:
				doExplore
			case SIGNAL_FR:
				doSignalFirstResponders
			default:
				error("Unknown intention: " + this.intention)
		}

	}

	def doTakeOff {
		takeOff;
		this.intention = REACH_FLY_ALTITUDE
	}
	
	def doReachAltitude{
		val flightAlt = new Vector3r(position.x, position.y, Config.flyAltitude)
		if(!isInPosition(flightAlt)){
			moveToPosition(flightAlt)
		}else{
			this.intention = EXPLORE
		}
	}

	def doExplore {

		if (assignedArea.priority == Priority.LOW) {
			wake(new PerformRandomSweep)
		} else { // Priority HIGH
			wake(new PerformPlowSweep)
		}
	}

	def doSignalFirstResponders {
		wake(new PerformFirstResponderSignaling)
	}

}
