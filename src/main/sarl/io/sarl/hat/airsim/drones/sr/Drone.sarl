/** 
 * 
 */
package io.sarl.hat.airsim.drones.sr

import fr.utbm.airsim.api.MultirotorState
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.hat.airsim.drones.Config
import io.sarl.hat.airsim.drones.TakeOffCompleted
import io.sarl.hat.airsim.drones.behaviors.exploration.ExploreArea
import io.sarl.hat.airsim.drones.capacities.IndividualMultirotorControlCapacity
import io.sarl.hat.airsim.drones.capacities.SimControllerForwardIndividualMultirotorControl
import java.util.concurrent.atomic.AtomicBoolean

/** 
 * @author sebastianrodriguez
 * 
 */
event VictimDetected

event DronePerceptionsUpdated

agent Drone {

	uses Logging, Schedules, Behaviors

	uses IndividualMultirotorControlCapacity, DroneState
	uses SearchRescueBeliefs

	var takingOff : AtomicBoolean = new AtomicBoolean(false)

	var name : String

	on Initialize {

		this.name = occurrence.parameters.get(0) as String

		// Setup Skill to control my body
		setSkill(new SimControllerForwardIndividualMultirotorControl(), IndividualMultirotorControlCapacity)

		// Set beliefs about drone's state
		setSkill(new DroneStateSkill, DroneState)
		registerBehavior(new AirsimDroneStateUpdater(this))

		// Set beliefs for Search and Rescue Operations
		setSkill(new SearchRescueBeliefsSkill, SearchRescueBeliefs)

		// Behaviors
		// to detect victims
		registerBehavior(new VictimDetection(this))
	}

	/** 
	 * Handle a command to explore an area
	 */
	on ExploreArea {
		assignedArea = occurrence.area
	}

	on DronePerceptionsUpdated [isFromMe] {

		if (!this.takingOff.get) {
			takeOff
			takingOff.set(true)
		} else if (assignedArea.contains(position.x, position.y)) {

			wake(new VictimDetected)

		} else {
			info("{4} : I am at [{0},{1}]; need to go to [{2},{3}] ", position.x, position.y, assignedArea.centerX,
				assignedArea.centerY, this.name)
			moveToPosition(assignedArea.centerX, assignedArea.centerY, Config.flyAltitude)
		}

	}

}
