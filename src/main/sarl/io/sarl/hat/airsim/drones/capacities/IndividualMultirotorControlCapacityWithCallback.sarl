/** 
 * 
 */
package io.sarl.hat.airsim.drones

import java.util.concurrent.Future
import fr.utbm.airsim.api.MultirotorState
import fr.utbm.airsim.api.Vector3r
import io.sarl.lang.core.Agent

/** 
 * Capacity to control a particular multirotor body in the simulation.
 * The name of multirotor should be given to the skill implementation.
 * This capacity should be given to the simulation controller agent.
 * 
 * @author Sebastian Rodriguez
 * 
 */
capacity IndividualMultirotorControlCapacityWithCallback {

		/** 
		 * A method to call in order to enable the control of the vehicle
		 */
	def enableControl

	/** 
	 * Take-off order for the given vehicle
	 */
	def takeOff(callback : (Agent)=>void)

	/** 
	 * Land order for the given vehicle
	 */
	def land(callback : (Agent)=>void)

	/** 
	 * Go-home order for the given vehicle
	 */
	def goHome(callback : (Agent)=>void)

	/** 
	 * Move-to-position order for the given vehicle
	 * @param x the x position
	 * @param y the y position
	 * @param z the z position
	 */
	def moveToPosition(x : Float, y : Float, z : Float, velocity : Float, callback : (Agent)=>void)

	/** 
	 * Move-by-velocity order for the given vehicle
	 * @param vx the velocity along the x axis
	 * @param vy the velocity along the y axis
	 * @param vz the velocity along the z axis
	 * @param duration the duration of the movement in seconds
	 */
//	def moveByVelocity(vx : Float, vy : Float, vz : Float, duration : Float, callback : (Agent)=>void)

	/** 
	 * Rotate-by-yaw-rate order for the given vehicle
	 * @param yawRate the yaw rate
	 * @param duration the duration of the order in seconds
	 */
//	def rotateByYawRate(yawRate : Float, duration : Float, callback : (Agent)=>void)

	/** 
	 * Rotate-to-yaw order for the given vehicle
	 * @param yaw the target yaw angle
	 */
//	def rotateToYaw(yaw : Float, callback : (Agent)=>void)

	/** 
	 * Gets the state of the given multirotor object
	 * @param vehicleName the name of the vehicle
	 * @return the state of the vehicle
	 */
	def getMultirotorState : MultirotorState

	/** 
	 * Gets the estimated position of the drone in NED coordinates
	 */
	def getPosition : Vector3r

	def say(msg : String)
}
