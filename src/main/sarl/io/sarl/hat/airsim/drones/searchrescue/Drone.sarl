/** 
 * 
 */
package io.sarl.hat.airsim.drones.searchrescue

import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.hat.airsim.drones.behaviors.ExploreArea
import io.sarl.hat.airsim.drones.behaviors.PerformFirstResponderSignaling
import io.sarl.hat.airsim.drones.behaviors.PerformPlowSweep
import io.sarl.hat.airsim.drones.behaviors.PerformRandomSweep
import io.sarl.hat.airsim.drones.behaviors.PlowSweep
import io.sarl.hat.airsim.drones.behaviors.RandomSweep
import io.sarl.hat.airsim.drones.behaviors.VerticalFirtResponderSignaling
import io.sarl.hat.airsim.drones.behaviors.VictimDetection
import io.sarl.hat.airsim.drones.capacities.IndividualMultirotorControlCapacity
import io.sarl.hat.airsim.drones.capacities.SimControllerForwardIndividualMultirotorControl

import static io.sarl.hat.airsim.drones.searchrescue.DroneIntention.*

/** 
 * @author sebastianrodriguez
 * 
 */
event VictimDetected {
	val x : float
	val y : float

	new(x : float, y : float) {
		this.x = x
		this.y = y
	}
}

event DronePerceptionsUpdated

enum DroneIntention {
	TAKEOFF,
	IDLE,
	EXPLORE,
	SIGNAL_FR
}

@SuppressWarnings("potential_field_synchronization_problem")
agent Drone {

	uses Logging, Behaviors

	uses IndividualMultirotorControlCapacity, DroneState
	uses SearchRescueBeliefs

	var intention = TAKEOFF

	

	on Initialize {


		// Setup Skill to control my body
		setSkill(new SimControllerForwardIndividualMultirotorControl(), IndividualMultirotorControlCapacity)

		// Set beliefs about drone's state
		setSkill(new DroneStateSkill, DroneState)
		registerBehavior(new AirsimDroneStateUpdater(this))

		name = occurrence.parameters.get(0) as String
		


		// Set beliefs for Search and Rescue Operations
		setSkill(new SearchRescueBeliefsSkill, SearchRescueBeliefs)

		// Behaviors to
		// detect victims
		registerBehavior(new VictimDetection(this))

		// Signal First Responders a victim location
		registerBehavior(new VerticalFirtResponderSignaling(this))

		// Explore
		registerBehavior(new RandomSweep(this))
		registerBehavior(new PlowSweep(this))
	}

	/** 
	 * Handle a command to explore an area
	 */
	on ExploreArea {
		assignedArea = occurrence.area
	}

	on VictimDetected [isFromMe] {
		info("{2} VictimDetected {0},{1}", occurrence.x, occurrence.y , name)
		this.intention = SIGNAL_FR
	}

	on DronePerceptionsUpdated [isFromMe] {

		switch (this.intention) {
			case TAKEOFF:
				doTakeOff
			case EXPLORE:
				doExplore
			case SIGNAL_FR:
				doSignalFirstResponders
			default:
				error("Unknown intention: " + this.intention)
		}

	}

	def doTakeOff {
		takeOff;
		this.intention = EXPLORE
	}

	def doExplore {

		if (assignedArea.priority == Priority.LOW) {
			wake(new PerformRandomSweep)
		} else { // Priority HIGH
			wake(new PerformPlowSweep)
		}
	}

	def doSignalFirstResponders {
		wake(new PerformFirstResponderSignaling)
	}

}
