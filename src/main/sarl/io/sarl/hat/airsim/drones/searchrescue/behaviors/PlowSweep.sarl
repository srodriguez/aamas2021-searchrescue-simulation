/** 
 * 
 */
package io.sarl.hat.airsim.drones.searchrescue.behaviors

import fr.utbm.airsim.api.Vector3r
import io.sarl.core.Logging
import io.sarl.hat.airsim.drones.Config
import io.sarl.hat.airsim.drones.capacities.IndividualMultirotorControlCapacity
import io.sarl.hat.airsim.drones.searchrescue.Area
import io.sarl.hat.airsim.drones.searchrescue.agents.DroneState
import io.sarl.hat.airsim.drones.searchrescue.agents.SearchRescueBeliefs
import java.util.List
import java.util.concurrent.ConcurrentLinkedDeque

/** 
 * @author sebastianrodriguez
 * 
 */
event PerformPlowSweep extends PerformExploration

behavior PlowSweep {
	uses Logging
	uses SearchRescueBeliefs, DroneState, IndividualMultirotorControlCapacity

	val path = new ConcurrentLinkedDeque<Vector3r>()

	on PerformPlowSweep [isFromMe] {

		if (path.isEmpty) {
			path.addAll(PlowPathGenerator.generatePath(assignedArea, Config.flyAltitude))
		}

		var nextWaypoint = path.peek
		if (isInPosition(nextWaypoint)) {
			nextWaypoint = path.poll
		}

		debug("{3} : Area [{0},{1},{2}] -> nextPosition : [{4},{5},{6}] ", assignedArea.x, assignedArea.y,
			assignedArea.priority, "PLOW", nextWaypoint.x, nextWaypoint.y, nextWaypoint.z)

		moveToPosition(nextWaypoint)
	}

}

class PlowPathGenerator {
	def static generatePath(area : Area, flyAltitude : float) : Vector3r[] {
		val path : List<Vector3r> = newArrayList

		val gapX = 10f
		val gapY = 10f

		val finalX = area.x + area.width
		val finalY = area.y + area.height

		var nextX = area.x

		while (nextX <= finalX) {
			var nextY = area.y

			while (nextY <= finalY) {
				path.add(new Vector3r(nextX, nextY, flyAltitude))
				nextY = nextY + gapY
			}
			nextX = nextX + gapX
		}

		path
	}
}
