/** 
 * 
 */
package io.sarl.hat.airsim.drones

import fr.utbm.airsim.api.Vector3r
import io.sarl.hat.airsim.drones.sr.Area
import io.sarl.hat.airsim.drones.sr.Priority
import java.util.List

/** 
 * 
 * +-----+--------------+---------------+
 * |     |     LOW      |               |              
 * |     |    NO-VIC    |               |
 * +--(-20,20)----------+---------------+
 * |     |              |   HIGH        |              
 * |     |              |  VIC (15,15)  |
 * +--(-20,0)---------(0,0)-------------+   
 * |     |    LOW       |    HIGH       |
 * |     |  NO-VIC      |    NO-VIC     |
 * +-(-20,-20)-------(0,-20)------------+
 *  
 * @author Sebastian Rodriguez
 * 
 */
class Config extends Object {

	val static areas : List<Area> = newLinkedList
	val static areaSize = 20f

	def static getVictimLocations() : List<Vector3r> {
		newLinkedList(
			new Vector3r(15,15, 0)
		)
	}

	def static getFlyAltitude : Float {
		-7f
	}

	def static viewRange : Float {
		5f
	}

	def static getAreas : List<Area> {
		if (areas.empty) {
			// areas.addAll(generateAreas)
			areas.addAll(fixAreas)
		}
		areas
	}

	def static fixAreas : List<Area> {
		val res = newLinkedList
		res.add(new Area(-20f, 20f, areaSize, areaSize, Priority.LOW))
		res.add(new Area(0f, 0f, areaSize, areaSize, Priority.HIGH))
		res.add(new Area(-20f, -20f, areaSize, areaSize, Priority.LOW))		
		res.add(new Area(0f, -20f, areaSize, areaSize, Priority.HIGH))
		
		res
	}

	def static generateAreas : List<Area> {
		val res = newLinkedList

		val areasIt = 2
		for (var i = -areasIt; i <= areasIt; i++) {
			for (var j = -areasIt; j <= areasIt; j++) {
				res.add(new Area(i * areaSize, j * areaSize, areaSize, areaSize, Priority.LOW))
			}
		}
		res
	}
}
