/** 
 * 
 */
package io.sarl.hat.airsim.drones

import fr.utbm.airsim.api.Vector3r
import io.sarl.hat.airsim.drones.searchrescue.Area
import io.sarl.hat.airsim.drones.searchrescue.Priority
import java.util.List

/** 
 * 
 * General Configuration for Search and Rescue Application
 * 
 * Airsim uses North-East-Down (NED) coordinates, then in (x,y,z) x is North, y is East and z is down (then z=-5 means 5 meters above ground)
 * @author Sebastian Rodriguez
 * 
 */
class Config extends Object {

	val static areas : List<Area> = newLinkedList
	val static areaSize = 30f

	/* 
	 * Get Victims locations for simulated scanning
	 * Simulate 
	 */
	def static getVictimLocations() : List<Vector3r> {
		newLinkedList(
			new Vector3r(37, 29, 0) // Make sure to update Airsim setting.json to have a victim's avatar in that location.
		)
	}

	/** 
	 * Areas that the drones will need to explore 
	 */
	def static getAreas : List<Area> {
		if (areas.empty) {
			areas.addAll(fixAreas)
		}
		areas
	}

	/* 
	 * Fix set of areas
	 */
	private def static fixAreas : List<Area> {
		val res = newLinkedList

		// Neighborhood
		res.add(new Area(30f, 28f, areaSize, areaSize, Priority.HIGH))
		res.add(new Area(-40f, -40f, areaSize, areaSize, Priority.HIGH))
		res.add(new Area(-70f, 65f, areaSize, areaSize, Priority.HIGH))
		res.add(new Area(-70f, 95f, areaSize, areaSize, Priority.LOW))
		res
	}

	/** 
	 * Generate a grid on around (0,0) of {#areaSize} 
	 * 
	 */
	private def static generateAreas : List<Area> {
		val res = newLinkedList

		val areasIt = 2
		for (var i = -areasIt; i <= areasIt; i++) {
			for (var j = -areasIt; j <= areasIt; j++) {
				res.add(new Area(i * areaSize, j * areaSize, areaSize, areaSize, Priority.LOW))
			}
		}
		res
	}

	/** 
	 * The default fly altitude for drones
	 */
	def static getFlyAltitude : Float {
		-15f
	}

	/** 
	 * View range of drone's when detecting victims
	 * 
	 */
	def static viewRange : Float {
		5f
	}

	/** 
	 * Logging level for the app.
	 */
	def static loggingLevel : int {
		5
	}
}
