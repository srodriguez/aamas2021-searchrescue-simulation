/** 
 * 
 */
package io.sarl.hat.airsim.drones

import fr.utbm.airsim.api.Vector3r
import io.sarl.hat.airsim.drones.searchrescue.Area
import io.sarl.hat.airsim.drones.searchrescue.Priority
import java.util.List

/** 				
 * 						^
 *						|X (NORTH)
 * +-----+--------------+---------------+
 * |     |              |               |              
 * |     |              |               |
 * +-(100,-50)----------+---------------+
 * |     |              |               |
 * |     |              |               |
 * |     |              |               |              
 * |     |              |               |
 * +--(50,-50)----------+---------------+
 * |     |       LOW    |               |    
 * |     |     NO-VIC   |               | 
 * |     |              |               | 
 * +---(0,-50)--------(0,0)-------------+-----------+------------>
 * |     |    HIGH      |               |           |         Y (EAST)
 * |     | VIC(-49,-49) |               |LOW/NOVIC  |
 * |     |  (Trees)     |               |           |
 * +-(-50,-50)----------+------------(-50, 100)-----+-------------
 * |     |              |               |
 * |     |              |    HIGH       |
 * |     |              |   NO-VIC      |
 * |-----|---------(-100,0)-------------+---------------------
 * |     |              |               |
 * 
 *  (0,0) is almost the center of the soccer field. North towards volley ball courts.
 * 
 * @author Sebastian Rodriguez
 * 
 * Airsim Uses NED coordinates
 * 
 */
class Config extends Object {

	val static areas : List<Area> = newLinkedList
	val static areaSize = 50f

	def static getVictimLocations() : List<Vector3r> {
		newLinkedList(
			new Vector3r(-49,-49, 0)// Make sure to update Airsim setting.json to have a victim's avatar in that location.
		)
	}


	def static getAreas : List<Area> {
		if (areas.empty) {
			// areas.addAll(generateAreas)
			areas.addAll(fixAreas)
		}
		areas
	}

	def static fixAreas : List<Area> {
		val res = newLinkedList
		res.add(new Area(0f, -50f, areaSize, areaSize, Priority.LOW))
		res.add(new Area(-50f, -50f, areaSize, areaSize, Priority.HIGH))
		res.add(new Area(-50f, 100f, areaSize, areaSize, Priority.HIGH))		
		res.add(new Area(-100f, 0f, areaSize, areaSize, Priority.HIGH))
		
		res
	}

	def static generateAreas : List<Area> {
		val res = newLinkedList

		val areasIt = 2
		for (var i = -areasIt; i <= areasIt; i++) {
			for (var j = -areasIt; j <= areasIt; j++) {
				res.add(new Area(i * areaSize, j * areaSize, areaSize, areaSize, Priority.LOW))
			}
		}
		res
	}

	def static getFlyAltitude : Float {
		-15f
	}

	def static viewRange : Float {
		5f
	}


	def static loggingLevel : int {
		5
	}
}
