/** 
 * 
 */
package io.sarl.hat.airsim.drones

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.hat.airsim.drones.searchrescue.agents.Drone
import io.sarl.hat.airsim.drones.searchrescue.behaviors.AreaAssignment
import java.util.HashMap
import java.util.UUID

event StartSearchAndRescue

/** 
 * Agent to Boot Application
 * 
 * @author sebastian rodriguez
 * 
 */
agent BootAgent {
	uses Logging, Lifecycle, DefaultContextInteractions, Schedules, Behaviors

	//Server Config
	val SERVER_IP = "192.168.1.101" // Seb's
	val SERVER_PORT = 41451

	// Drones names
	val pool = newLinkedList("Alpha", "Bravo", "Charly", "Delta")

	val drones : HashMap<UUID, String> = newHashMap

	on Initialize {

		loggingName = "Boot"
		setLogLevel(Config.loggingLevel)
		
		info("Booting Simulations")
		info("{0} total search areas: {1}", Config.areas.size, Config.areas)

		SimulationController.spawn(SERVER_IP, SERVER_PORT)

		for (name : pool) {
			info("Spawning " + name)
			val id = Drone.spawn(name)
			info("Spawning agents for Drone {0}", name)
			drones.put(id, name)
			emit(new AddSimulatedDrone(id, name))
		}

		in(1000)[wake(new StartSearchAndRescue)]

	}

	on StartSearchAndRescue {
		info("Starting S&R...")
		
		var areaNumber = 0
		val areas = Config.areas
		for (id : drones.keySet) {
			val aNum = areaNumber++
			emit(new AreaAssignment(drones.get(id), areas.get(aNum)))[it.UUID == id]
		}
	}

}

